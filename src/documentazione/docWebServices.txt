Documentazione web services


Obbiettivo: richiesta da parte del client di cambio del formato del file mandato. 
Il server (su rete locale) utilizzerà l'engine per compiere il serivizio predisposto.
Il servizio in caso di success ritornerà il file convertito e il json; in caso di fallimento tornerà solo un dump page in formato json 




definizione:
Un'interfaccia che consente a un'applicazione di interagire con un'altra attraverso la rete, senza bisogno di sapere come è implementata internamente.

===========================================================================================================================

Funzionamento generale
 - Un'applicazione client invia una richiesta (di solito via HTTP o HTTPS).
 - Il Web Service riceve la richiesta e la elabora.
 - Il servizio restituisce una risposta strutturata (tipicamente in XML o JSON).


===========================================================================================================================
Tipo principali di Web Services:


1. SOAP Web Services
 - Usa il protocollo SOAP (Simple Object Access Protocol).
 - Scambia messaggi in XML.
 - Più formale e standardizzato.
 - Supporta WSDL (Web Services Description Language) per descrivere i servizi.

Esempi: sistemi bancari, applicazioni legacy, enterprise software.



2. RESTful Web Services
 - Usa l'architettura REST (REpresentational State Transfer).
 - Scambia dati in JSON o XML (di solito JSON).
 - Leggero, semplice e usato molto nelle app moderne.
 - Usa i metodi HTTP standard:
	GET, POST, PUT, DELETE, ecc.

Esempi: API di Facebook, Twitter, Google Maps, servizi backend di app mobili.



===========================================================================================================================
Tecnologie usate

Java		-->	JAX-WS (per SOAP), JAX-RS (per REST), Spring Boot
JavaScript	-->	Express (Node.js), Fetch/Axios per chiamate clients


===========================================================================================================================
Implementazioni java --> Spring Boot

1. Cosa ti serve
 - Java 8
 - Maven o Gradle
 - Spring Boot (la versione minima compatibile con Java 8)
 -IDE (IntelliJ, Eclipse o simili)



2. Dipendenze Maven (pom.xml)
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
</dependencies>





3. Struttura del progetto
src/
 └── main/
      └── java/
           └── com/example/demo/
                ├── DemoApplication.java
                └── controller/
                     └── HelloController.java




4. Classe principale (DemoApplication.java)
package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}







5. Crea un controller REST (HelloController.java)
package com.example.demo.controller;

import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api")
public class HelloController {

    // GET /api/hello
    @GetMapping("/hello")
    public String sayHello() {
        return "Ciao dal servizio REST!";
    }

    // GET /api/user/123
    @GetMapping("/user/{id}")
    public String getUserById(@PathVariable("id") int id) {
        return "Utente con ID: " + id;
    }

    // POST /api/user
    @PostMapping("/user")
    public String createUser(@RequestBody String name) {
        return "Utente creato: " + name;
    }
}



6. Esegui l'app
(bash)
http://localhost:8080/api/hello





7. Test con Postman o browser
 - GET /api/hello → ritorna "Ciao dal servizio REST!" 
 - GET /api/user/123 → ritorna "Utente con ID: 123"
 - sPOST /api/user con body "Mario" → ritorna "Utente creato: Mario"





===========================================================================================================================
===========================================================================================================================
IMPLEMENTAZIONE API WEB DA PROGETTO VUOTO

OBIETTIVO
 - Una REST API
 - In grado di ricevere richieste HTTP (GET, POST)
 - Che gira in locale su localhost:8080



1)CREA IL PROGETTO SPRING BOOT
 - File > New > Project
 - Scegli Spring Initializer
 - imposta:
	- Project SDK: java 8
	- Group com.example
	- Artifact: demo
 - premi Next
 - Aggiungi le dipendenze:
	- Spring Web
 - Premi Finish
IntelliJ scaricherà le dipendenze e creerà la struttura del progetto.





2)STRUTTURA BASE
src/
 └─ main/
     └─ java/
         └─ com/example/demo/
             ├─ DemoApplication.java
             └─ controller/
                 └─ HelloController.java

Se controller/ non esiste, crealo manualmente.






3)CODICE PRINCIPALE - DemoApplication.java
package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}





4)CREA UN CONTROLLER REST
Crea il file HelloController.java in com.example.demo.controller:

package com.example.demo.controller;

import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api")
public class HelloController {

    @GetMapping("/hello")
    public String hello() {
        return "Ciao dal server Spring Boot!";
    }

    @PostMapping("/echo")
    public String echo(@RequestBody String message) {
        return "Hai scritto: " + message;
    }
}




5)IMPOSTA JAVA 8 IN INTELLIJ (Skippabile)
Vai su:
	- File > Project Structure > Project
		- SDK: 1.8
		- Language level: 8
	- File > Settings > Build, Execution, Deployment > Compiler
		- Bytecode version: 1.8






6)AVVIA IL SERVER
 - Clicca col tasto destro su DemoApplication.java
 - Scegli Run 'DemoApplication'

Vedrai in console qualcosa come:
(scss)

Tomcat started on port(s): 8080
Started DemoApplication in X.XXX seconds





7)TESTA LA COMUNICAZIONE
(Se col Browser)
Vai su:
	- http://localhost:8080/api/hello

→ risultato: Ciao dal server Spring Boot!


(Oppure con Postman o curl)
[bash]
curl -X POST http://localhost:8080/api/echo -d "testo di esempio"

→ Risposta: "Hai scritto: testo di esempio"

	




8)AGGIUNGI UNA CLASSE MODEL (Facoltativo)
esempio:
public class User {
    public String name;
    public int age;
}

nel controller:
@PostMapping("/user")
public User createUser(@RequestBody User user) {
    return user;
}



===========================================================================================================================
===========================================================================================================================










file-converter-project/
├── pom.xml
├── config/
│   └── config.json
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   ├── gui/
│   │   │   │   ├── MainApp.java
│   │   │   │   ├── MainViewController.java
│   │   │   │   └── ConfigWindowController.java
│   │   │   ├── converter/
│   │   │   │   ├── Engine.java
│   │   │   │   ├── ConverterConfig.java
│   │   │   │   ├── DirectoryWatcher.java
│   │   │   │   └── Log.java
│   │   │   ├── Converters/
│   │   │   │   └── Converter.java (interface)
│   │   │   │   └── [altre classi converter...]
│   │   │   └── webservice/
│   │   │       ├── WebServiceApplication.java
│   │   │       ├── client/
│   │   │       │   └── ConverterWebServiceClient.java
│   │   │       ├── controller/
│   │   │       │   └── ConverterController.java
│   │   │       ├── config/
│   │   │       │   └── WebServiceConfig.java
│   │   │       └── service/
│   │   │           └── FileConversionService.java
│   │   └── resources/
│   │       ├── GraphicalMenu.fxml
│   │       ├── ConfigWindow.fxml
│   │       └── application.properties
│   └── temp/
│       ├── uploads/
│       └── outputs/
├── logs/
└── target/ (generata da Maven)
 

da qui l'albero corretto:

SUDDIVISIONE DEL LAVORO AGGIORNATA
SVILUPPATORE A - FRONTEND & CLIENT (8 classi + UI)
gui/
├── MainApp.java                          ✓ Modifica esistente
├── MainViewController.java               ✓ Modifica esistente
└── ConfigWindowController.java           ✓ Esistente

webservice/client/
├── ConverterWebServiceClient.java        ★ NUOVA - Priorità ALTA
└── ConversionResult.java                 ★ NUOVA - Priorità ALTA

webservice/dto/
├── ErrorResponse.java                    ★ NUOVA - Priorità MEDIA
├── UploadProgress.java                   ★ NUOVA - Priorità BASSA
└── ValidationResult.java                ★ NUOVA - Priorità MEDIA

webservice/exception/
├── FileConversionException.java          ★ NUOVA - Priorità MEDIA
├── FileValidationException.java          ★ NUOVA - Priorità BASSA
└── ServiceUnavailableException.java      ★ NUOVA - Priorità MEDIA

resources/
├── GraphicalMenu.fxml                    ✓ Modifica per webservice
└── ConfigWindow.fxml                     ✓ Esistente
SVILUPPATORE B - BACKEND & SERVICES (9 classi + config)
webservice/
└── WebServiceApplication.java            ★ NUOVA - Priorità ALTA

webservice/controller/
├── ConverterController.java              ★ NUOVA - Priorità ALTA
├── FileUploadController.java             ★ NUOVA - Priorità BASSA
└── ExceptionHandlerController.java       ★ NUOVA - Priorità MEDIA

webservice/service/
├── FileConversionService.java            ★ NUOVA - Priorità ALTA
├── WebServiceEngine.java                 ★ NUOVA - Priorità ALTA
└── TempFileCleanupService.java           ★ NUOVA - Priorità MEDIA

webservice/config/
└── WebServiceConfig.java                 ★ NUOVA - Priorità ALTA

webservice/dto/
└── ConversionJob.java                    ★ NUOVA - Priorità MEDIA

resources/
├── application.properties                ★ NUOVA - Priorità ALTA
├── application-dev.properties            ★ NUOVA - Priorità BASSA
└── application-prod.properties           ★ NUOVA - Priorità BASSA





















