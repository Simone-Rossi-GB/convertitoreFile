============================================================================================================================================
============================================================================================================================================
package webservice;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ConfigurableApplicationContext;

@SpringBootApplication
public class WebServiceApplication {

    private static ConfigurableApplicationContext context;

    public static void startWebService() {
        if (context == null || !context.isActive()) {
            context = SpringApplication.run(WebServiceApplication.class);
            System.out.println("Web Service avviato su porta 8080");
        }
    }

    public static void stopWebService() {
        if (context != null && context.isActive()) {
            context.close();
            System.out.println("Web Service fermato");
        }
    }

    public static boolean isRunning() {
        return context != null && context.isActive();
    }

    public static void main(String[] args) {
        startWebService();
    }
}

============================================================================================================================================

package webservice.controller;

import Engine;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.http.ResponseEntity;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.Map;
import java.util.UUID;

@RestController
@RequestMapping("/api/webService.client.objects")
@CrossOrigin(origins = "*")
public class ConverterController {

    private final Engine engine = new Engine();

    @GetMapping("/status")
    public ResponseEntity<Map<String, String>> getStatus() {
        return ResponseEntity.ok(Map.of("status", "active"));
    }

    @GetMapping("/conversions/{extension}")
    public ResponseEntity<List<String>> getPossibleConversions(@PathVariable String extension) {
        try {
            List<String> conversions = engine.getPossibleConversions(extension);
            return ResponseEntity.ok(conversions);
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }

    @PostMapping("/convert")
    public ResponseEntity<Map<String, Object>> convertFile(
            @RequestParam("file") MultipartFile file,
            @RequestParam("targetFormat") String targetFormat,
            @RequestParam(value = "password", required = false) String password,
            @RequestParam(value = "mergeImages", required = false, defaultValue = "false") boolean mergeImages) {

        String conversionId = UUID.randomUUID().toString();

        try {
            // Crea directory temporanea se non esiste
            String tempDir = "temp/uploads/";
            Files.createDirectories(Paths.get(tempDir));

            // Salva file temporaneo
            String originalFilename = file.getOriginalFilename();
            String extension = getFileExtension(originalFilename);

            File tempFile = new File(tempDir + conversionId + "_" + originalFilename);
            file.transferTo(tempFile);

            // Chiama l'Engine per conversione con i parametri giusti
            if (password != null && !password.trim().isEmpty()) {
                if (mergeImages && targetFormat.equals("jpg")) {
                    engine.conversione(extension, targetFormat, tempFile, password, mergeImages);
                } else {
                    engine.conversione(extension, targetFormat, tempFile, password);
                }
            } else {
                if (mergeImages && targetFormat.equals("jpg")) {
                    engine.conversione(extension, targetFormat, tempFile, mergeImages);
                } else {
                    engine.conversione(extension, targetFormat, tempFile);
                }
            }

            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "Conversione completata con successo",
                "conversionId", conversionId
            ));

        } catch (Exception e) {
            return ResponseEntity.ok(Map.of(
                "success", false,
                "error", e.getMessage()
            ));
        }
    }

    private String getFileExtension(String filename) {
        if (filename == null || !filename.contains(".")) {
            return "";
        }
        return filename.substring(filename.lastIndexOf('.') + 1).toLowerCase();
    }
}

============================================================================================================================================

package webservice.client;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import okhttp3.*;

import java.io.File;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

public class ConverterWebServiceClient {

    private final OkHttpClient client;
    private final String baseUrl;
    private final Gson gson;

    public ConverterWebServiceClient(String baseUrl) {
        this.baseUrl = baseUrl.endsWith("/") ? baseUrl : baseUrl + "/";
        this.gson = new Gson();
        this.client = new OkHttpClient.Builder()
                .connectTimeout(30, TimeUnit.SECONDS)
                .readTimeout(120, TimeUnit.SECONDS)
                .build();
    }

    public boolean isServiceAvailable() {
        try {
            Request request = new Request.Builder()
                    .url(baseUrl + "api/webService.client.objects/status")
                    .build();
            try (Response response = client.newCall(request).execute()) {
                return response.isSuccessful();
            }
        } catch (Exception e) {
            return false;
        }
    }

    public List<String> getPossibleConversions(String extension) throws Exception {
        Request request = new Request.Builder()
                .url(baseUrl + "api/webService.client.objects/conversions/" + extension)
                .build();

        try (Response response = client.newCall(request).execute()) {
            if (!response.isSuccessful()) {
                throw new Exception("Conversione non supportata per: " + extension);
            }

            String jsonResponse = response.body().string();
            Type listType = new TypeToken<List<String>>(){}.getType();
            return gson.fromJson(jsonResponse, listType);
        }
    }

    public ConversionResult convertFile(File sourceFile, String targetFormat) throws Exception {
        return convertFile(sourceFile, targetFormat, null, false);
    }

    public ConversionResult convertFile(File sourceFile, String targetFormat, String password) throws Exception {
        return convertFile(sourceFile, targetFormat, password, false);
    }

    public ConversionResult convertFile(File sourceFile, String targetFormat, String password, boolean mergeImages) throws Exception {

        if (!sourceFile.exists() || !sourceFile.isFile()) {
            throw new Exception("File sorgente non valido: " + sourceFile.getAbsolutePath());
        }

        MultipartBody.Builder builder = new MultipartBody.Builder()
                .setType(MultipartBody.FORM)
                .addFormDataPart("file", sourceFile.getName(),
                    RequestBody.create(sourceFile, MediaType.parse("application/octet-stream")))
                .addFormDataPart("targetFormat", targetFormat);

        if (password != null && !password.trim().isEmpty()) {
            builder.addFormDataPart("password", password);
        }

        if (mergeImages) {
            builder.addFormDataPart("mergeImages", "true");
        }

        Request request = new Request.Builder()
                .url(baseUrl + "api/webService.client.objects/convert")
                .post(builder.build())
                .build();

        try (Response response = client.newCall(request).execute()) {
            String responseBody = response.body().string();
            Map<String, Object> result = gson.fromJson(responseBody, Map.class);

            Boolean success = (Boolean) result.get("success");
            if (success != null && success) {
                return new ConversionResult(true, (String) result.get("message"), null);
            } else {
                return new ConversionResult(false, null, (String) result.get("error"));
            }
        }
    }

    public void close() {
        if (client != null) {
            client.dispatcher().executorService().shutdown();
            client.connectionPool().evictAll();
        }
    }
}

============================================================================================================================================

package webservice.client;

public class ConversionResult {

    private final boolean success;
    private final String message;
    private final String error;

    public ConversionResult(boolean success, String message, String error) {
        this.success = success;
        this.message = message;
        this.error = error;
    }

    public boolean isSuccess() {
        return success;
    }

    public String getMessage() {
        return message;
    }

    public String getError() {
        return error;
    }

    public boolean hasError() {
        return error != null && !error.trim().isEmpty();
    }

    public String getStatusMessage() {
        return success ? message : error;
    }

    @Override
    public String toString() {
        return "ConversionResult{" +
                "success=" + success +
                ", message='" + (success ? message : error) + "'" +
                "}";
    }

    // Factory methods per creare risultati
    public static ConversionResult success(String message) {
        return new ConversionResult(true, message, null);
    }

    public static ConversionResult error(String error) {
        return new ConversionResult(false, null, error);
    }
}

====================================================================================================================================

// AGGIUNGI QUESTE PARTI AL TUO MainViewController.java ESISTENTE

// ========== IMPORT DA AGGIUNGERE ==========
import webservice.client.ConverterWebServiceClient;
import webservice.client.ConversionResult;
import java.nio.file.StandardCopyOption;

// ========== VARIABILI DA AGGIUNGERE ==========
// Aggiungi dopo le altre variabili di istanza esistenti
private ConverterWebServiceClient webServiceClient;
private boolean useWebService = false;









// ========== MODIFICA AL METODO initialize() ==========
// Aggiungi questa riga nel metodo initialize() esistente


@FXML
private void initialize() throws IOException {
    engine = new Engine();

    // ... il resto del codice esistente ...

    // AGGIUNGI QUESTA RIGA:
    webServiceClient = new ConverterWebServiceClient("http://localhost:8080");

    // ... resto del metodo initialize() esistente ...
}







// ========== SOSTITUISCI IL METODO launchDialogConversion ==========
// Sostituisci completamente il metodo esistente con questo:

public void launchDialogConversion(File srcFile) {
    Platform.runLater(() -> fileRicevuti++);

    String srcExtension = getExtension(srcFile);
    System.out.println("Estensione file sorgente: " + srcExtension);
    List<String> formats = null;

    try {
        // Prova prima il webservice, se fallisce usa l'engine locale
        if (webServiceClient.isServiceAvailable()) {
            formats = webServiceClient.getPossibleConversions(srcExtension);
            useWebService = true;
            addLogMessage("Usando web service per conversione di " + srcFile.getName());
        } else {
            formats = engine.getPossibleConversions(srcExtension);
            useWebService = false;
            addLogMessage("Web service non disponibile, usando engine locale per " + srcFile.getName());
        }
    } catch (Exception e) {
        launchAlertError("Conversione di " + srcFile.getName() + " non supportata");
        moveFileToErrorFolder(srcFile);
        Platform.runLater(() -> {
            fileScartati++;
            stampaRisultati();
        });
        return;
    }

    List<String> finalFormats = formats;
    Platform.runLater(() -> {
        ChoiceDialog<String> dialog = new ChoiceDialog<>(finalFormats.get(0), finalFormats);
        dialog.setTitle("Seleziona Formato");
        dialog.setHeaderText("Converti " + srcFile.getName() + " in...");
        dialog.setContentText("Formato desiderato:");

        Optional<String> result = dialog.showAndWait();
        result.ifPresent(format -> {
            new Thread(() -> performConversion(srcFile, format)).start();
        });
    });
}

// ========== METODI NUOVI DA AGGIUNGERE ==========
// Aggiungi questi metodi alla fine della classe

private void performConversion(File srcFile, String targetFormat) {
    try {
        String srcExtension = getExtension(srcFile);
        String password = null;
        boolean mergeImages = false;

        // Gestione dialoghi per PDF
        if (srcExtension.equals("pdf")) {
            password = launchDialogPdf();
            if (targetFormat.equals("jpg")) {
                mergeImages = launchDialogUnisci();
            }
        }

        if (useWebService) {
            // Usa webservice
            addLogMessage("Avvio conversione tramite web service...");
            ConversionResult result = webServiceClient.convertFile(srcFile, targetFormat, password, mergeImages);

            if (result.isSuccess()) {
                addLogMessage("Conversione completata tramite web service: " + result.getMessage());
                moveFileToSuccessFolder(srcFile);
                Platform.runLater(() -> {
                    fileConvertiti++;
                    stampaRisultati();
                    launchAlertSuccess(srcFile);
                });
            } else {
                throw new Exception(result.getError());
            }
        } else {
            // Usa engine locale (codice esistente)
            addLogMessage("Avvio conversione tramite engine locale...");
            if (password != null) {
                if (mergeImages) {
                    engine.conversione(srcExtension, targetFormat, srcFile, password, mergeImages);
                } else {
                    engine.conversione(srcExtension, targetFormat, srcFile, password);
                }
            } else {
                if (mergeImages) {
                    engine.conversione(srcExtension, targetFormat, srcFile, mergeImages);
                } else {
                    engine.conversione(srcExtension, targetFormat, srcFile);
                }
            }

            addLogMessage("Conversione completata tramite engine locale");
            Platform.runLater(() -> {
                fileConvertiti++;
                stampaRisultati();
                launchAlertSuccess(srcFile);
            });
        }

    } catch (Exception e) {
        addLogMessage("Errore durante conversione: " + e.getMessage());
        moveFileToErrorFolder(srcFile);
        Platform.runLater(() -> {
            fileScartati++;
            stampaRisultati();
            launchAlertError("Errore: " + e.getMessage());
        });
    }
}

private void moveFileToSuccessFolder(File file) {
    try {
        Path srcPath = file.toPath();
        Path destPath = Paths.get(convertedFolderPath, file.getName());
        Files.move(srcPath, destPath, StandardCopyOption.REPLACE_EXISTING);
        addLogMessage("File spostato in cartella successi: " + destPath);
    } catch (Exception e) {
        addLogMessage("Errore nello spostamento file in cartella successi: " + e.getMessage());
    }
}

private void moveFileToErrorFolder(File file) {
    try {
        Path srcPath = file.toPath();
        Path destPath = Paths.get(failedFolderPath, file.getName());
        Files.move(srcPath, destPath, StandardCopyOption.REPLACE_EXISTING);
        addLogMessage("File spostato in cartella errori: " + destPath);
    } catch (Exception e) {
        addLogMessage("Errore nello spostamento file in cartella errori: " + e.getMessage());
    }
}