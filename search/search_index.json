{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Convertitore di File - Java 8 & Spring Boot Descrizione Applicazione client-server in Java 8 con Spring Boot. Il sistema consente la conversione automatica di file tramite monitoraggio di una cartella locale e l'invio di richieste al server per la conversione. Funzionalit\u00e0 principali Monitoraggio automatico di una directory sul client. Invio file da convertire al server tramite REST API. Conversione lato server. GUI lato client per gestione impostazioni. Aggiornamento impostazioni tramite JSON condivisi. Logging avanzato con barre di progresso. Separazione dei file convertiti con successo da quelli falliti. Architettura Client : Directory Watcher GUI JavaFX Configurazione in file JSON Server : Spring Boot REST API Moduli per la configurazione dei file Motore centrale che gestisce le conversioni Tecnologie Java 1.8 Maven 3.6 Spring Boot 2.7.18 IDE: IntelliJ IDEA Conversioni supportate PDF PDF \u2192 DOC PDF \u2192 DOCX PDF \u2192 JPG JSON e CSV JSON \u2194 XLS JSON \u2194 XLSX JSON \u2194 ODS CSV \u2192 JSON Email EML \u2192 PDF MSG \u2192 PDF Testo TXT \u2192 DOCX TXT \u2192 PDF Compressed files ZIP \u2194 TAR.GZ Conversioni immagini bidirezionali BMP \u2194 GIF BMP \u2194 JPEG BMP \u2194 JPG BMP \u2194 PNG BMP \u2194 TIFF BMP \u2194 WEBP GIF \u2194 JPEG GIF \u2194 JPG GIF \u2194 PNG GIF \u2194 TIFF GIF \u2194 WEBP JPEG \u2194 JPG JPEG \u2194 PNG JPEG \u2194 TIFF JPEG \u2194 WEBP JPG \u2194 PNG JPG \u2194 TIFF JPG \u2194 WEBP PNG \u2194 TIFF PNG \u2194 WEBP TIFF \u2194 WEBP PSD \u2194 BMP PSD \u2194 GIF PSD \u2194 JPEG PSD \u2194 JPG PSD \u2194 PNG PSD \u2194 TIFF PSD \u2194 WEBP ICO \u2194 PNG ICO \u2194 JPEG ICO \u2194 JPG ICO \u2194 ICNS ICNS \u2194 PNG ICNS \u2194 JPEG ICNS \u2194 JPG ICNS \u2194 ICO Conversioni immagini unidirezionali PAM \u2192 ICO PAM \u2192 JPEG PAM \u2192 JPG PAM \u2192 PNG PBM \u2192 ICO PBM \u2192 JPEG PBM \u2192 JPG PBM \u2192 PNG PGM \u2192 ICO PGM \u2192 JPEG PGM \u2192 JPG PGM \u2192 PNG PNM \u2192 ICO PNM \u2192 JPEG PNM \u2192 JPG PNM \u2192 PNG PPM \u2192 ICO PPM \u2192 JPEG PPM \u2192 JPG PPM \u2192 PNG IFF \u2192 ICO IFF \u2192 JPEG IFF \u2192 JPG IFF \u2192 PNG TGA \u2192 BMP TGA \u2192 ICO TGA \u2192 JPEG TGA \u2192 JPG TGA \u2192 PNG XWD \u2192 ICO XWD \u2192 JPEG XWD \u2192 JPG XWD \u2192 PNG","title":"Home"},{"location":"#convertitore-di-file-java-8-spring-boot","text":"","title":"Convertitore di File - Java 8 &amp; Spring Boot"},{"location":"#descrizione","text":"Applicazione client-server in Java 8 con Spring Boot. Il sistema consente la conversione automatica di file tramite monitoraggio di una cartella locale e l'invio di richieste al server per la conversione.","title":"Descrizione"},{"location":"#funzionalita-principali","text":"Monitoraggio automatico di una directory sul client. Invio file da convertire al server tramite REST API. Conversione lato server. GUI lato client per gestione impostazioni. Aggiornamento impostazioni tramite JSON condivisi. Logging avanzato con barre di progresso. Separazione dei file convertiti con successo da quelli falliti.","title":"Funzionalit\u00e0 principali"},{"location":"#architettura","text":"Client : Directory Watcher GUI JavaFX Configurazione in file JSON Server : Spring Boot REST API Moduli per la configurazione dei file Motore centrale che gestisce le conversioni","title":"Architettura"},{"location":"#tecnologie","text":"Java 1.8 Maven 3.6 Spring Boot 2.7.18 IDE: IntelliJ IDEA","title":"Tecnologie"},{"location":"#conversioni-supportate","text":"","title":"Conversioni supportate"},{"location":"#pdf","text":"PDF \u2192 DOC PDF \u2192 DOCX PDF \u2192 JPG","title":"PDF"},{"location":"#json-e-csv","text":"JSON \u2194 XLS JSON \u2194 XLSX JSON \u2194 ODS CSV \u2192 JSON","title":"JSON e CSV"},{"location":"#email","text":"EML \u2192 PDF MSG \u2192 PDF","title":"Email"},{"location":"#testo","text":"TXT \u2192 DOCX TXT \u2192 PDF","title":"Testo"},{"location":"#compressed-files","text":"ZIP \u2194 TAR.GZ","title":"Compressed files"},{"location":"#conversioni-immagini-bidirezionali","text":"BMP \u2194 GIF BMP \u2194 JPEG BMP \u2194 JPG BMP \u2194 PNG BMP \u2194 TIFF BMP \u2194 WEBP GIF \u2194 JPEG GIF \u2194 JPG GIF \u2194 PNG GIF \u2194 TIFF GIF \u2194 WEBP JPEG \u2194 JPG JPEG \u2194 PNG JPEG \u2194 TIFF JPEG \u2194 WEBP JPG \u2194 PNG JPG \u2194 TIFF JPG \u2194 WEBP PNG \u2194 TIFF PNG \u2194 WEBP TIFF \u2194 WEBP PSD \u2194 BMP PSD \u2194 GIF PSD \u2194 JPEG PSD \u2194 JPG PSD \u2194 PNG PSD \u2194 TIFF PSD \u2194 WEBP ICO \u2194 PNG ICO \u2194 JPEG ICO \u2194 JPG ICO \u2194 ICNS ICNS \u2194 PNG ICNS \u2194 JPEG ICNS \u2194 JPG ICNS \u2194 ICO","title":"Conversioni immagini bidirezionali"},{"location":"#conversioni-immagini-unidirezionali","text":"PAM \u2192 ICO PAM \u2192 JPEG PAM \u2192 JPG PAM \u2192 PNG PBM \u2192 ICO PBM \u2192 JPEG PBM \u2192 JPG PBM \u2192 PNG PGM \u2192 ICO PGM \u2192 JPEG PGM \u2192 JPG PGM \u2192 PNG PNM \u2192 ICO PNM \u2192 JPEG PNM \u2192 JPG PNM \u2192 PNG PPM \u2192 ICO PPM \u2192 JPEG PPM \u2192 JPG PPM \u2192 PNG IFF \u2192 ICO IFF \u2192 JPEG IFF \u2192 JPG IFF \u2192 PNG TGA \u2192 BMP TGA \u2192 ICO TGA \u2192 JPEG TGA \u2192 JPG TGA \u2192 PNG XWD \u2192 ICO XWD \u2192 JPEG XWD \u2192 JPG XWD \u2192 PNG","title":"Conversioni immagini unidirezionali"},{"location":"API/","text":"API Documentation - Converter Web Service Introduzione Questo servizio REST permette di interrogare lo stato del server, ottenere le possibili conversioni di file supportate per un dato formato e convertire file da un formato ad un altro. Base URL: /api/converter Cross-Origin abilitato per tutti i domini. Endpoints Stato del servizio GET /status Descrizione: Restituisce lo stato attuale del servizio. Request: Nessun parametro Response 200: { \"status\": \"active\" } Possibili conversioni per estensione GET /conversions/{extension} Descrizione: Restituisce una lista di formati in cui \u00e8 possibile convertire un file con una data estensione di partenza. Path Parameters: extension (string): estensione del file di partenza (es. pdf , jpg ) Response 200: es. [ \"doc\", \"docx\", \"jpg\" ] Conversione file POST /convert Descrizione: Converte un file caricato da un formato di origine al formato di destinazione specificato, applicando le opzioni impostate nel file conversionConfig.json passato dal client. Request: Parametri multipart/form-data: file (file): File da convertire targetFormat (string): Formato di destinazione (es. pdf , docx ) configFile (file): File JSON con i parametri utili alla conversione Response 200: File convertito come allegato Headers: Content-Type : Media type del file convertito Content-Disposition : Attachment; filename=\"nomefile\" Content-Length : Lunghezza in byte Errori Gli errori vengono gestiti centralmente tramite un Rest Controller Advice che intercetta le eccezioni e ritorna una risposta con codice di errore mappato sulla base del tipo di eccezione. Response 500 \u2013 Errore Interno del Server Tutti gli errori restituiscono lo status HTTP 500 Internal Server Error con corpo JSON nel seguente formato: { \"errorCode\": , \"message\": \"Messaggio dell'eccezione\", \"stackTrace\": \"Prima riga dello stack trace\" } Elenco dei codici di errore 1001. IllegalExtensionException: Estensione del file non supportata o vietata. 1002. FileMoveException: Errore durante lo spostamento o salvataggio del file. 1003. UnsupportedConversionException: La conversione richiesta non \u00e8 supportata. 1004. IOException: Errore generico di input/output durante la conversione. 1005 . BatchConversionException: Errore durante l'elaborazione di un lotto di file. 1006. ConversionException: Errore generico durante il processo di conversione. 1007. FileCreationException: Impossibile creare il file convertito. 1008. EmptyFileException: Il file in input \u00e8 vuoto. 1009. FormatsException: Errore nei formati di input/output specificati. 1010. PasswordException: Il file \u00e8 protetto da password o non accessibile. 1011. NullPointerException: Oggetto null. 9999. Exception: Errore interno inatteso (variabile nulla o oggetto non inizializzato). Flusso tipico di utilizzo Il client fa una chiamata chiama GET /conversions/{extension} per ottenere i formati disponibili per la conversione. Il server cerca nel file serverConfig.json le informazioni richieste e allega alla risposta la lista di estensioni per la conversione. Il client fa una chiamata POST /convert , passando il file da convertire, l'estensione di destinazione e il file conversionContext.json, con i parametri validi solo per quella conversione. Il server invia una risposta con un'array di byte che rappresenta il contenuto del file convertito e il mediaType rilevato nell'header","title":"API"},{"location":"API/#api-documentation-converter-web-service","text":"","title":"API Documentation - Converter Web Service"},{"location":"API/#introduzione","text":"Questo servizio REST permette di interrogare lo stato del server, ottenere le possibili conversioni di file supportate per un dato formato e convertire file da un formato ad un altro. Base URL: /api/converter Cross-Origin abilitato per tutti i domini.","title":"Introduzione"},{"location":"API/#endpoints","text":"","title":"Endpoints"},{"location":"API/#stato-del-servizio","text":"GET /status Descrizione: Restituisce lo stato attuale del servizio. Request: Nessun parametro Response 200: { \"status\": \"active\" }","title":"Stato del servizio"},{"location":"API/#possibili-conversioni-per-estensione","text":"GET /conversions/{extension} Descrizione: Restituisce una lista di formati in cui \u00e8 possibile convertire un file con una data estensione di partenza. Path Parameters: extension (string): estensione del file di partenza (es. pdf , jpg ) Response 200: es. [ \"doc\", \"docx\", \"jpg\" ]","title":"Possibili conversioni per estensione"},{"location":"API/#conversione-file","text":"POST /convert Descrizione: Converte un file caricato da un formato di origine al formato di destinazione specificato, applicando le opzioni impostate nel file conversionConfig.json passato dal client. Request: Parametri multipart/form-data: file (file): File da convertire targetFormat (string): Formato di destinazione (es. pdf , docx ) configFile (file): File JSON con i parametri utili alla conversione Response 200: File convertito come allegato Headers: Content-Type : Media type del file convertito Content-Disposition : Attachment; filename=\"nomefile\" Content-Length : Lunghezza in byte","title":"Conversione file"},{"location":"API/#errori","text":"Gli errori vengono gestiti centralmente tramite un Rest Controller Advice che intercetta le eccezioni e ritorna una risposta con codice di errore mappato sulla base del tipo di eccezione.","title":"Errori"},{"location":"API/#response-500-errore-interno-del-server","text":"Tutti gli errori restituiscono lo status HTTP 500 Internal Server Error con corpo JSON nel seguente formato: { \"errorCode\": , \"message\": \"Messaggio dell'eccezione\", \"stackTrace\": \"Prima riga dello stack trace\" }","title":"Response 500 \u2013 Errore Interno del Server"},{"location":"API/#elenco-dei-codici-di-errore","text":"","title":"Elenco dei codici di errore"},{"location":"API/#1001-illegalextensionexception","text":"Estensione del file non supportata o vietata.","title":"1001. IllegalExtensionException:"},{"location":"API/#1002-filemoveexception","text":"Errore durante lo spostamento o salvataggio del file.","title":"1002. FileMoveException:"},{"location":"API/#1003-unsupportedconversionexception","text":"La conversione richiesta non \u00e8 supportata.","title":"1003. UnsupportedConversionException:"},{"location":"API/#1004-ioexception","text":"Errore generico di input/output durante la conversione.","title":"1004. IOException:"},{"location":"API/#1005-batchconversionexception","text":"Errore durante l'elaborazione di un lotto di file.","title":"1005. BatchConversionException:"},{"location":"API/#1006-conversionexception","text":"Errore generico durante il processo di conversione.","title":"1006. ConversionException:"},{"location":"API/#1007-filecreationexception","text":"Impossibile creare il file convertito.","title":"1007. FileCreationException:"},{"location":"API/#1008-emptyfileexception","text":"Il file in input \u00e8 vuoto.","title":"1008. EmptyFileException:"},{"location":"API/#1009-formatsexception","text":"Errore nei formati di input/output specificati.","title":"1009. FormatsException:"},{"location":"API/#1010-passwordexception","text":"Il file \u00e8 protetto da password o non accessibile.","title":"1010. PasswordException:"},{"location":"API/#1011-nullpointerexception","text":"Oggetto null.","title":"1011. NullPointerException:"},{"location":"API/#9999-exception","text":"Errore interno inatteso (variabile nulla o oggetto non inizializzato).","title":"9999. Exception:"},{"location":"API/#flusso-tipico-di-utilizzo","text":"Il client fa una chiamata chiama GET /conversions/{extension} per ottenere i formati disponibili per la conversione. Il server cerca nel file serverConfig.json le informazioni richieste e allega alla risposta la lista di estensioni per la conversione. Il client fa una chiamata POST /convert , passando il file da convertire, l'estensione di destinazione e il file conversionContext.json, con i parametri validi solo per quella conversione. Il server invia una risposta con un'array di byte che rappresenta il contenuto del file convertito e il mediaType rilevato nell'header","title":"Flusso tipico di utilizzo"},{"location":"Config/","text":"Config documentation - File di Configurazione Introduzione Il sistema di gestione della configurazione \u00e8 stato progettato per gestire parametri di configurazione tramite file JSON, supportando operazioni di lettura e scrittura lato client e di sola lettura lato server. La configurazione pu\u00f2 essere modificata dall'utente tramite un'interfaccia grafica dedicata nel client. Al momento della conversione al server viene inviato il file json con i parametri necessari alla conversione. Il file viene memorizzato in una cartella temporanea ed eliminato al termine dell'operazione. Architettura del Sistema Lato client config.json : Contiene le informazioni relative alla cartella monitorata, a quelle di destinazione e ad altre opzioni utili all'applicazione lato client. Pu\u00f2 essere modificato tramite un'apposita finestra dalla GUI. conversionContext.json : Contiene le informazioni relative alle opzioni di conversione (es. password, watermark, compressione, ecc...). Pu\u00f2 essere modificato tramite un'apposita finestra dalla GUI. Lato server serverConfig.json : Contiene le informazioni relative alle conversioni supportate e i percorsi delle rispettive classi da istanziare per effettuare la conversione. Non pu\u00f2 essere modificato. conversionContext.json : Contiene le informazioni relative alle opzioni di conversione (es. password, watermark, compressione, ecc...). Ciascuno \u00e8 associato ad una singola richiesta di conversione e viene memorizzato in una cartella temporanea. Al termine della conversione viene eliminato. Classi Data (Classe Base) Classe astratta che fornisce l'infrastruttura comune per la gestione dei dati di configurazione: Caratteristiche principali: Mantiene un riferimento thread-safe al file JSON corrente Gestisce una mappa condivisa ( configDataMap ) contenente i dati parsati Fornisce caching del nodo radice per evitare riletture multiple Include logging per tracciamento delle operazioni Metodi chiave: update(ConfigInstance configInstance) : Aggiorna la configurazione caricando un nuovo file o ricaricando quello modificato getJsonFile() : Restituisce il file JSON attualmente attivo Instance Rappresenta un'istanza validata di configurazione associata a un file JSON specifico. Funzionalit\u00e0: Validazione automatica : Verifica la presenza di tutti i campi obbligatori durante la creazione Campi obbligatori validati : successOutputDir : Directory per conversioni riuscite errorOutputDir : Directory per conversioni fallite monitoredDir : Directory da monitorare monitorAtStart : Flag per avvio automatico monitoraggio conversions : Struttura delle conversioni supportate Reader Fornisce accesso di sola lettura ai parametri di configurazione tramite metodi statici. Importante : Le modifiche vengono lette solo dalla mappa in memoria. Writer Permette la modifica dinamica dei parametri di configurazione in memoria. Importante : Le modifiche vengono applicate solo alla mappa in memoria. Per la persistenza su disco \u00e8 necessario utilizzare JsonWriter . InstanceReader Lettore specializzato per operazioni su file specifici, mantenendo un proprio riferimento al nodo radice. Vantaggi: Isolamento per file: ogni istanza gestisce un file diverso Caching ottimizzato per istanza Supporto per operazioni concorrenti su file diversi Metodi mirror : Fornisce gli stessi metodi di Reader ma per l'istanza specifica. InstanceWriter Writer specializzato per file specifici con persistenza automatica. Gestione degli Errori Il sistema utilizza JsonStructureException per segnalare problemi di struttura o contenuto: File malformato : JSON non valido Campi mancanti : Assenza di campi obbligatori Tipi incompatibili : Valori con tipo diverso da quello atteso Flusso tipico di utilizzo Creare un' Instance e fare un update prima di utilizzare la configurazione, in modo da caricarla correttamente. Utilizzare i metodi statici della classe Reader per leggere le informazioni dalla mappa condivisa. Usare i metodi statici della classe InstanceWriter per modificare direttamente il file json. Fare un update dell' Instance per aggiornare le informazioni nella mappa condivisa.","title":"Configurazione"},{"location":"Config/#config-documentation-file-di-configurazione","text":"","title":"Config documentation - File di Configurazione"},{"location":"Config/#introduzione","text":"Il sistema di gestione della configurazione \u00e8 stato progettato per gestire parametri di configurazione tramite file JSON, supportando operazioni di lettura e scrittura lato client e di sola lettura lato server. La configurazione pu\u00f2 essere modificata dall'utente tramite un'interfaccia grafica dedicata nel client. Al momento della conversione al server viene inviato il file json con i parametri necessari alla conversione. Il file viene memorizzato in una cartella temporanea ed eliminato al termine dell'operazione.","title":"Introduzione"},{"location":"Config/#architettura-del-sistema","text":"","title":"Architettura del Sistema"},{"location":"Config/#lato-client","text":"config.json : Contiene le informazioni relative alla cartella monitorata, a quelle di destinazione e ad altre opzioni utili all'applicazione lato client. Pu\u00f2 essere modificato tramite un'apposita finestra dalla GUI. conversionContext.json : Contiene le informazioni relative alle opzioni di conversione (es. password, watermark, compressione, ecc...). Pu\u00f2 essere modificato tramite un'apposita finestra dalla GUI.","title":"Lato client"},{"location":"Config/#lato-server","text":"serverConfig.json : Contiene le informazioni relative alle conversioni supportate e i percorsi delle rispettive classi da istanziare per effettuare la conversione. Non pu\u00f2 essere modificato. conversionContext.json : Contiene le informazioni relative alle opzioni di conversione (es. password, watermark, compressione, ecc...). Ciascuno \u00e8 associato ad una singola richiesta di conversione e viene memorizzato in una cartella temporanea. Al termine della conversione viene eliminato.","title":"Lato server"},{"location":"Config/#classi","text":"","title":"Classi"},{"location":"Config/#data-classe-base","text":"Classe astratta che fornisce l'infrastruttura comune per la gestione dei dati di configurazione: Caratteristiche principali: Mantiene un riferimento thread-safe al file JSON corrente Gestisce una mappa condivisa ( configDataMap ) contenente i dati parsati Fornisce caching del nodo radice per evitare riletture multiple Include logging per tracciamento delle operazioni Metodi chiave: update(ConfigInstance configInstance) : Aggiorna la configurazione caricando un nuovo file o ricaricando quello modificato getJsonFile() : Restituisce il file JSON attualmente attivo","title":"Data (Classe Base)"},{"location":"Config/#instance","text":"Rappresenta un'istanza validata di configurazione associata a un file JSON specifico. Funzionalit\u00e0: Validazione automatica : Verifica la presenza di tutti i campi obbligatori durante la creazione Campi obbligatori validati : successOutputDir : Directory per conversioni riuscite errorOutputDir : Directory per conversioni fallite monitoredDir : Directory da monitorare monitorAtStart : Flag per avvio automatico monitoraggio conversions : Struttura delle conversioni supportate","title":"Instance"},{"location":"Config/#reader","text":"Fornisce accesso di sola lettura ai parametri di configurazione tramite metodi statici. Importante : Le modifiche vengono lette solo dalla mappa in memoria.","title":"Reader"},{"location":"Config/#writer","text":"Permette la modifica dinamica dei parametri di configurazione in memoria. Importante : Le modifiche vengono applicate solo alla mappa in memoria. Per la persistenza su disco \u00e8 necessario utilizzare JsonWriter .","title":"Writer"},{"location":"Config/#instancereader","text":"Lettore specializzato per operazioni su file specifici, mantenendo un proprio riferimento al nodo radice. Vantaggi: Isolamento per file: ogni istanza gestisce un file diverso Caching ottimizzato per istanza Supporto per operazioni concorrenti su file diversi Metodi mirror : Fornisce gli stessi metodi di Reader ma per l'istanza specifica.","title":"InstanceReader"},{"location":"Config/#instancewriter","text":"Writer specializzato per file specifici con persistenza automatica.","title":"InstanceWriter"},{"location":"Config/#gestione-degli-errori","text":"Il sistema utilizza JsonStructureException per segnalare problemi di struttura o contenuto: File malformato : JSON non valido Campi mancanti : Assenza di campi obbligatori Tipi incompatibili : Valori con tipo diverso da quello atteso","title":"Gestione degli Errori"},{"location":"Config/#flusso-tipico-di-utilizzo","text":"Creare un' Instance e fare un update prima di utilizzare la configurazione, in modo da caricarla correttamente. Utilizzare i metodi statici della classe Reader per leggere le informazioni dalla mappa condivisa. Usare i metodi statici della classe InstanceWriter per modificare direttamente il file json. Fare un update dell' Instance per aggiornare le informazioni nella mappa condivisa.","title":"Flusso tipico di utilizzo"},{"location":"Doc/","text":"Documentation - bytesBridge Introduzione Il progetto prevede un'applicazione lato client che riceve i file, permette all'utente di impostare le opzioni per la conversione e li invia ad un server che espone un servizio do conversione. Lato client L'applicazione prevede un servizio che monitora una cartella in modo da rilevare quando viene aggiunto un file. La cartella monitorata, quelle di destinazione e altri parametri utili possono essere modificati dall'utente tramite apposite finestre. In caso di conversione riuscita il file originale rimane nella cartella monitorata e il risultato viene salvato in una differente, destinata ai file convertiti. In caso di conversione fallita il file originale viene spostato dalla cartella monitorata a quella dedicata alle operazioni fallite. Lato server Il server espone un servizio di conversione gestito da un motore centrale. La conversione avviene appoggiandosi su una cartella temporanea che viene eliminata al termine delle operazioni. Il motore centrale si occupa di individuare il convertitore da utilizzare e il tipo di conversione utilizzare (singola o multipla in caso di cartelle compresse). Classi lato server ConverterWebServiceController.java Controller REST Spring Boot che espone API per conversioni file via web service. Funzioni principali: getStatus() Endpoint : GET /api/webService.client.objects/status . Funzione : Verifica che il web service sia attivo. Ritorna : JSON con {\"status\": \"active\"} . getPossibleConversions(@PathVariable String extension) Endpoint : GET /api/webService.client.objects/conversions/{extension} . Funzione : Restituisce i formati di destinazione disponibili per una data estensione. Input : Estensione file (es. \"pdf\"). Output : Lista di estensioni supportate per la conversione. convertFile() Endpoint : POST /api/webService.client.objects/convert . Funzione : Converte un file caricato nel formato richiesto. Parametri : file : File da convertire (MultipartFile). targetFormat : Formato di destinazione. configFile : File di configurazione con parametri utili alla conversione. Flusso tipico di utilizzo : Crea directory temporanea univoca con UUID. Salva il file di configurazione nella directory temporanea. Salva il file caricato nella directory temporanea. Chiama EngineWebService per la conversione effettiva. Legge il file convertito e lo restituisce come array di byte. Pulisce automaticamente tutti i file temporanei nel finally . EngineWebService.java Motore centrale di conversione che individua automaticamente il convertitore da usare e il tipo di conversione da effettuare (singola o multipla in caso di cartelle compresse). Funzioni principali: getPossibleConversions(String extension) Consulta il file serverConfig.json per determinare i formati di destinazione disponibili. Restituisce la lista di estensioni supportate per la conversione. conversioneSingola(srcExt, outExt, srcFile, outputDirectory) Istanzia il convertitore corretto sulla base dei formati di partenza e destinazione. Elimina il file temporaneo al termine della conversione. conversioneMultipla(srcExt, outExt, srcFile, outputDirectory) Decomprime la cartella compressa. Chiama conversioneSingola per ciascuno dei file. conversioneMultipla(srcExt, outExt, srcFile, outputDirectory) Legge dal file conversionContext.json se \u00e8 abilitata la conversione multipla. Individua se eseguire una conversione singola o una conversione multipla. Classi lato client ConverterWebServiceClient.java Client per comunicare con il web service da applicazioni esterne. Funzioni principali: isServiceAvailable() Testa la connettivit\u00e0 al web service. Chiama l'endpoint /status e verifica la risposta. Gestisce eccezioni di rete e timeout. getPossibleConversions(String extension) Richiede al web service i formati disponibili per una estensione. Converte la risposta da array a List<String> . Gestisce errori HTTP e di rete. convertFile() Verifica disponibilit\u00e0 servizio Prepara richiesta multipart con file e parametri. Esegue POST al web serviceRiceve array di byte del file convertito. Salva il file localmente nel percorso specificato. Gestione errori completa: Errori HTTP, di rete, I/O. Ritorna ConversionResult con stato e messaggio. ConversionResult.java Classe per incapsulare il risultato di una conversione. Propriet\u00e0: success : Boolean che indica successo/fallimento. message : Messaggio descrittivo per successi. error : Messaggio di errore dettagliato. DirectoryWatcher.java Fornisce un servizio di monitoraggio su una cartella Funzioni principali: registerAll(Path start) Effettua un controllo ricorsivo su tutte le sottocartelle a partire da quella passata come parametro. Registra in una mappa Il path di ciascuna cartella associato ad una WatchKey MainViewController.java Controller principale della GUI dell'applicazione. Funzioni principali: launchDialogConversion(File srcFile) Funzione chiamata quando viene rilevato un nuovo file. Chiede al server i formati disponibili per la conversione. Mostra un dialog per selezione formato. Fa una chiamata POST al server per effettuare la conversione. openConfigurationWindow() / openConversionConfigurationWindow() Aprono finestre per modificare rispettivamente i file config.json e conversionConfig.json. Sono associati a controller che modificano i file json e ricaricano le rispettive mappe condivise. Limiti PDF : max 27 pagine. File generici : max 100 MB.","title":"Documentazione"},{"location":"Doc/#documentation-bytesbridge","text":"","title":"Documentation - bytesBridge"},{"location":"Doc/#introduzione","text":"Il progetto prevede un'applicazione lato client che riceve i file, permette all'utente di impostare le opzioni per la conversione e li invia ad un server che espone un servizio do conversione.","title":"Introduzione"},{"location":"Doc/#lato-client","text":"L'applicazione prevede un servizio che monitora una cartella in modo da rilevare quando viene aggiunto un file. La cartella monitorata, quelle di destinazione e altri parametri utili possono essere modificati dall'utente tramite apposite finestre. In caso di conversione riuscita il file originale rimane nella cartella monitorata e il risultato viene salvato in una differente, destinata ai file convertiti. In caso di conversione fallita il file originale viene spostato dalla cartella monitorata a quella dedicata alle operazioni fallite.","title":"Lato client"},{"location":"Doc/#lato-server","text":"Il server espone un servizio di conversione gestito da un motore centrale. La conversione avviene appoggiandosi su una cartella temporanea che viene eliminata al termine delle operazioni. Il motore centrale si occupa di individuare il convertitore da utilizzare e il tipo di conversione utilizzare (singola o multipla in caso di cartelle compresse).","title":"Lato server"},{"location":"Doc/#classi-lato-server","text":"","title":"Classi lato server"},{"location":"Doc/#converterwebservicecontrollerjava","text":"Controller REST Spring Boot che espone API per conversioni file via web service.","title":"ConverterWebServiceController.java"},{"location":"Doc/#funzioni-principali","text":"getStatus() Endpoint : GET /api/webService.client.objects/status . Funzione : Verifica che il web service sia attivo. Ritorna : JSON con {\"status\": \"active\"} . getPossibleConversions(@PathVariable String extension) Endpoint : GET /api/webService.client.objects/conversions/{extension} . Funzione : Restituisce i formati di destinazione disponibili per una data estensione. Input : Estensione file (es. \"pdf\"). Output : Lista di estensioni supportate per la conversione. convertFile() Endpoint : POST /api/webService.client.objects/convert . Funzione : Converte un file caricato nel formato richiesto. Parametri : file : File da convertire (MultipartFile). targetFormat : Formato di destinazione. configFile : File di configurazione con parametri utili alla conversione. Flusso tipico di utilizzo : Crea directory temporanea univoca con UUID. Salva il file di configurazione nella directory temporanea. Salva il file caricato nella directory temporanea. Chiama EngineWebService per la conversione effettiva. Legge il file convertito e lo restituisce come array di byte. Pulisce automaticamente tutti i file temporanei nel finally .","title":"Funzioni principali:"},{"location":"Doc/#enginewebservicejava","text":"Motore centrale di conversione che individua automaticamente il convertitore da usare e il tipo di conversione da effettuare (singola o multipla in caso di cartelle compresse).","title":"EngineWebService.java"},{"location":"Doc/#funzioni-principali_1","text":"getPossibleConversions(String extension) Consulta il file serverConfig.json per determinare i formati di destinazione disponibili. Restituisce la lista di estensioni supportate per la conversione. conversioneSingola(srcExt, outExt, srcFile, outputDirectory) Istanzia il convertitore corretto sulla base dei formati di partenza e destinazione. Elimina il file temporaneo al termine della conversione. conversioneMultipla(srcExt, outExt, srcFile, outputDirectory) Decomprime la cartella compressa. Chiama conversioneSingola per ciascuno dei file. conversioneMultipla(srcExt, outExt, srcFile, outputDirectory) Legge dal file conversionContext.json se \u00e8 abilitata la conversione multipla. Individua se eseguire una conversione singola o una conversione multipla.","title":"Funzioni principali:"},{"location":"Doc/#classi-lato-client","text":"","title":"Classi lato client"},{"location":"Doc/#converterwebserviceclientjava","text":"Client per comunicare con il web service da applicazioni esterne.","title":"ConverterWebServiceClient.java"},{"location":"Doc/#funzioni-principali_2","text":"isServiceAvailable() Testa la connettivit\u00e0 al web service. Chiama l'endpoint /status e verifica la risposta. Gestisce eccezioni di rete e timeout. getPossibleConversions(String extension) Richiede al web service i formati disponibili per una estensione. Converte la risposta da array a List<String> . Gestisce errori HTTP e di rete. convertFile() Verifica disponibilit\u00e0 servizio Prepara richiesta multipart con file e parametri. Esegue POST al web serviceRiceve array di byte del file convertito. Salva il file localmente nel percorso specificato. Gestione errori completa: Errori HTTP, di rete, I/O. Ritorna ConversionResult con stato e messaggio.","title":"Funzioni principali:"},{"location":"Doc/#conversionresultjava","text":"Classe per incapsulare il risultato di una conversione.","title":"ConversionResult.java"},{"location":"Doc/#proprieta","text":"success : Boolean che indica successo/fallimento. message : Messaggio descrittivo per successi. error : Messaggio di errore dettagliato.","title":"Propriet\u00e0:"},{"location":"Doc/#directorywatcherjava","text":"Fornisce un servizio di monitoraggio su una cartella","title":"DirectoryWatcher.java"},{"location":"Doc/#funzioni-principali_3","text":"registerAll(Path start) Effettua un controllo ricorsivo su tutte le sottocartelle a partire da quella passata come parametro. Registra in una mappa Il path di ciascuna cartella associato ad una WatchKey","title":"Funzioni principali:"},{"location":"Doc/#mainviewcontrollerjava","text":"Controller principale della GUI dell'applicazione.","title":"MainViewController.java"},{"location":"Doc/#funzioni-principali_4","text":"launchDialogConversion(File srcFile) Funzione chiamata quando viene rilevato un nuovo file. Chiede al server i formati disponibili per la conversione. Mostra un dialog per selezione formato. Fa una chiamata POST al server per effettuare la conversione. openConfigurationWindow() / openConversionConfigurationWindow() Aprono finestre per modificare rispettivamente i file config.json e conversionConfig.json. Sono associati a controller che modificano i file json e ricaricano le rispettive mappe condivise.","title":"Funzioni principali:"},{"location":"Doc/#limiti","text":"PDF : max 27 pagine. File generici : max 100 MB.","title":"Limiti"},{"location":"WebService/","text":"Documentazione Converter WebService Panoramica del Progetto Il Converter WebService \u00e8 un'applicazione distribuita che permette la conversione di file attraverso un'architettura client-server. Il sistema \u00e8 composto da un'applicazione client che monitora una cartella locale e da un servizio web REST che gestisce le conversioni dei file. Architettura del Sistema Client Application (JavaFX) \u2190\u2192 WebService REST API (Spring Boot) \u2190\u2192 Conversion Engine Il progetto segue un'architettura a microservizi dove: Client : Interfaccia grafica per la selezione dei file e delle opzioni di conversione WebService : API REST per la gestione delle richieste di conversione Engine : Motore di conversione che gestisce la logica di trasformazione dei file Struttura del Progetto file-webService.client.objects-project/ \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 config/ \u2502 \u2514\u2500\u2500 config.json \u251c\u2500\u2500 src/main/java/ \u2502 \u251c\u2500\u2500 webService.client.gui/ # Interfaccia utente client \u2502 \u2502 \u251c\u2500\u2500 MainApp.java \u2502 \u2502 \u251c\u2500\u2500 MainViewController.java \u2502 \u2502 \u2514\u2500\u2500 ConfigWindowController.java \u2502 \u251c\u2500\u2500 webService.client.objects/ # Logica client \u2502 \u2502 \u251c\u2500\u2500 Engine.java \u2502 \u2502 \u251c\u2500\u2500 ConverterConfig.java \u2502 \u2502 \u251c\u2500\u2500 DirectoryWatcher.java \u2502 \u2502 \u2514\u2500\u2500 Log.java \u2502 \u251c\u2500\u2500 webService.server/ # Componenti server \u2502 \u2502 \u251c\u2500\u2500 WebServiceApplication.java \u2502 \u2502 \u251c\u2500\u2500 ConverterWebServiceController.java \u2502 \u2502 \u251c\u2500\u2500 EngineWebService.java \u2502 \u2502 \u251c\u2500\u2500 GlobalExceptionHandler.java \u2502 \u2502 \u2514\u2500\u2500 ErrorResponse.java \u2502 \u2514\u2500\u2500 webService.server.converters/ # Convertitori specifici \u2502 \u2514\u2500\u2500 Converter.java (interface) \u251c\u2500\u2500 src/main/resources/ \u2502 \u251c\u2500\u2500 GraphicalMenu.fxml \u2502 \u251c\u2500\u2500 ConfigWindow.fxml \u2502 \u2514\u2500\u2500 application.properties \u2514\u2500\u2500 temp/ \u251c\u2500\u2500 uploads/ \u2514\u2500\u2500 outputs/ Componenti Server 1. WebServiceApplication.java Classe principale dell'applicazione Spring Boot che gestisce il ciclo di vita del servizio web. Funzionalit\u00e0 principali: Avvio e arresto del servizio web Inizializzazione dei gestori di configurazione Controllo dello stato del servizio Metodi pubblici: public static void startWebService() // Avvia il servizio web public static void stopWebService() // Ferma il servizio web public static boolean isRunning() // Verifica se il servizio \u00e8 attivo 2. ConverterWebServiceController.java Controller REST che espone le API per la conversione dei file. Gestisce le richieste HTTP e orchestra il processo di conversione. Endpoints disponibili: GET /api/converter/status Restituisce lo stato del servizio web. Risposta: { \"status\": \"active\" } GET /api/converter/conversions/{extension} Ottiene le possibili conversioni per un formato specifico. Parametri: extension : Estensione del file di partenza Risposta: [\"pdf\", \"docx\", \"txt\"] POST /api/converter/convert Effettua la conversione di un file. Parametri: file : File da convertire (MultipartFile) targetFormat : Formato di destinazione configFile : File di configurazione per la conversione Risposta: File convertito come array di byte con headers appropriati Processo di conversione: Creazione directory temporanea univoca Upload del file di configurazione Salvataggio del file di input nella directory temporanea Chiamata al motore di conversione Preparazione della risposta HTTP con file convertito Pulizia dei file temporanei 3. EngineWebService.java Motore di conversione che gestisce la logica di trasformazione dei file. Supporta conversioni singole e multiple (tramite archivi ZIP). Funzionalit\u00e0 principali: getPossibleConversions(String extension) Restituisce i formati disponibili per la conversione da un formato specifico. conversione(String srcExt, String outExt, File srcFile) Esegue la conversione del file: Verifica se \u00e8 richiesta una conversione multipla (file ZIP) Gestisce conversioni singole o multiple Utilizza il pattern Strategy per selezionare il convertitore appropriato Conversione Multipla Per file ZIP contiene pi\u00f9 file dello stesso formato: Estrazione dei file dall'archivo Conversione di ogni file individualmente Ricompressione dei file convertiti Conversione Singola Per file individuali: Selezione del convertitore tramite reflection Istanziazione dinamica del convertitore Esecuzione della conversione Pulizia dei file temporanei 4. GlobalExceptionHandler.java Gestore globale delle eccezioni che fornisce risposte strutturate per tutti gli errori del sistema. Eccezioni gestite: IllegalExtensionException (Codice: 1001) FileMoveException (Codice: 1002) UnsupportedConversionException (Codice: 1003) IOException (Codice: 1004) BatchConversionException (Codice: 1005) ConversionException (Codice: 1006) FileCreationException (Codice: 1007) EmptyFileException (Codice: 1008) FormatsException (Codice: 1009) PasswordException (Codice: 1010) NullPointerException (Codice: 1011) Exception generica (Codice: 9999) Formato risposta errore: { \"errorCode\": 1001, \"message\": \"Descrizione dell'errore\", \"stackTrace\": \"Prima riga dello stack trace\" } 5. ErrorResponse.java Classe DTO per la rappresentazione strutturata degli errori nelle risposte JSON. Campi: errorCode : Codice numerico identificativo dell'errore message : Messaggio descrittivo dell'errore stackTrace : Prima riga dello stack trace per il debugging Flusso di Conversione 1. Richiesta Formati Disponibili Client \u2192 GET /api/converter/conversions/{extension} \u2192 Server Server \u2192 Consulta configurazione \u2192 Restituisce lista formati 2. Conversione File Client \u2192 POST /api/converter/convert \u2192 Server Server \u2192 Crea directory temporanea Server \u2192 Salva file di input e configurazione Server \u2192 Chiama EngineWebService.conversione() EngineWebService \u2192 Seleziona convertitore dinamicamente EngineWebService \u2192 Esegue conversione Server \u2192 Prepara risposta HTTP con file convertito Server \u2192 Pulisce file temporanei Server \u2192 Restituisce file al client Gestione File Temporanei Il sistema utilizza directory temporanee univoche per ogni conversione: Creazione : Files.createTempDirectory(\"conversion-\" + UUID.randomUUID() + \"-\") Utilizzo : Salvataggio file di input e configurazione Pulizia : Eliminazione automatica di file e directory al termine della conversione Questa strategia garantisce: Isolamento delle conversioni concorrenti Prevenzione di conflitti di nomi file Pulizia automatica in caso di errori Gestione degli Errori Il sistema implementa una gestione strutturata degli errori su pi\u00f9 livelli: 1. Validazione Input Controllo esistenza e validit\u00e0 dei file Verifica supporto formati Validazione parametri richiesti 2. Gestione Eccezioni di Conversione Eccezioni specifiche per ogni tipo di errore Logging dettagliato per debugging Rollback automatico in caso di fallimento 3. Risposte HTTP Strutturate Codici di errore standardizzati Messaggi descrittivi per l'utente Stack trace per il debugging (solo primo livello) Sicurezza e Performance Gestione Concorrenza Directory temporanee univoche per conversioni parallele Pulizia automatica dei file temporanei Gestione safe dell'eliminazione file Validazione File Controllo tipo MIME tramite libreria Apache Tika Validazione estensioni supportate Controllo esistenza e integrit\u00e0 file Logging Logging strutturato con Log4j2 Tracciamento completo delle operazioni Livelli di log configurabili (TRACE, INFO, WARN, ERROR) Configurazione Il sistema utilizza due tipi di configurazione: 1. Configurazione Server ( serverConfig.json ) Definisce i convertitori disponibili e le mappature formato \u2192 classe: { \"conversions\": { \"pdf\": { \"docx\": \"webService.server.converters.PdfToDocxConverter\", \"txt\": \"webService.server.converters.PdfToTxtConverter\" } } } 2. Configurazione Conversione ( conversionContext ) Parametri specifici per ogni conversione (caricata dinamicamente dal client): Abilitazione conversioni multiple Parametri specifici del convertitore Opzioni di formattazione Estendibilit\u00e0 Aggiunta Nuovi Convertitori Estendere la classe astratta Converter Opzionale: estendere la classe astratta ConverterDocumentsWithPassword Aggiungere la mappatura in serverConfig.json Il sistema caricher\u00e0 dinamicamente la classe tramite reflection Aggiunta Nuovi Formati Implementare il convertitore specifico Aggiornare la configurazione dei formati supportati Opzionale: aggiungere validazioni specifiche nel GlobalExceptionHandler Questa architettura modulare permette l'estensione del sistema senza modifiche al codice esistente, seguendo il principio Open/Closed del SOLID design.","title":"Web Service"},{"location":"WebService/#documentazione-converter-webservice","text":"","title":"Documentazione Converter WebService"},{"location":"WebService/#panoramica-del-progetto","text":"Il Converter WebService \u00e8 un'applicazione distribuita che permette la conversione di file attraverso un'architettura client-server. Il sistema \u00e8 composto da un'applicazione client che monitora una cartella locale e da un servizio web REST che gestisce le conversioni dei file.","title":"Panoramica del Progetto"},{"location":"WebService/#architettura-del-sistema","text":"Client Application (JavaFX) \u2190\u2192 WebService REST API (Spring Boot) \u2190\u2192 Conversion Engine Il progetto segue un'architettura a microservizi dove: Client : Interfaccia grafica per la selezione dei file e delle opzioni di conversione WebService : API REST per la gestione delle richieste di conversione Engine : Motore di conversione che gestisce la logica di trasformazione dei file","title":"Architettura del Sistema"},{"location":"WebService/#struttura-del-progetto","text":"file-webService.client.objects-project/ \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 config/ \u2502 \u2514\u2500\u2500 config.json \u251c\u2500\u2500 src/main/java/ \u2502 \u251c\u2500\u2500 webService.client.gui/ # Interfaccia utente client \u2502 \u2502 \u251c\u2500\u2500 MainApp.java \u2502 \u2502 \u251c\u2500\u2500 MainViewController.java \u2502 \u2502 \u2514\u2500\u2500 ConfigWindowController.java \u2502 \u251c\u2500\u2500 webService.client.objects/ # Logica client \u2502 \u2502 \u251c\u2500\u2500 Engine.java \u2502 \u2502 \u251c\u2500\u2500 ConverterConfig.java \u2502 \u2502 \u251c\u2500\u2500 DirectoryWatcher.java \u2502 \u2502 \u2514\u2500\u2500 Log.java \u2502 \u251c\u2500\u2500 webService.server/ # Componenti server \u2502 \u2502 \u251c\u2500\u2500 WebServiceApplication.java \u2502 \u2502 \u251c\u2500\u2500 ConverterWebServiceController.java \u2502 \u2502 \u251c\u2500\u2500 EngineWebService.java \u2502 \u2502 \u251c\u2500\u2500 GlobalExceptionHandler.java \u2502 \u2502 \u2514\u2500\u2500 ErrorResponse.java \u2502 \u2514\u2500\u2500 webService.server.converters/ # Convertitori specifici \u2502 \u2514\u2500\u2500 Converter.java (interface) \u251c\u2500\u2500 src/main/resources/ \u2502 \u251c\u2500\u2500 GraphicalMenu.fxml \u2502 \u251c\u2500\u2500 ConfigWindow.fxml \u2502 \u2514\u2500\u2500 application.properties \u2514\u2500\u2500 temp/ \u251c\u2500\u2500 uploads/ \u2514\u2500\u2500 outputs/","title":"Struttura del Progetto"},{"location":"WebService/#componenti-server","text":"","title":"Componenti Server"},{"location":"WebService/#1-webserviceapplicationjava","text":"Classe principale dell'applicazione Spring Boot che gestisce il ciclo di vita del servizio web. Funzionalit\u00e0 principali: Avvio e arresto del servizio web Inizializzazione dei gestori di configurazione Controllo dello stato del servizio Metodi pubblici: public static void startWebService() // Avvia il servizio web public static void stopWebService() // Ferma il servizio web public static boolean isRunning() // Verifica se il servizio \u00e8 attivo","title":"1. WebServiceApplication.java"},{"location":"WebService/#2-converterwebservicecontrollerjava","text":"Controller REST che espone le API per la conversione dei file. Gestisce le richieste HTTP e orchestra il processo di conversione. Endpoints disponibili:","title":"2. ConverterWebServiceController.java"},{"location":"WebService/#get-apiconverterstatus","text":"Restituisce lo stato del servizio web. Risposta: { \"status\": \"active\" }","title":"GET /api/converter/status"},{"location":"WebService/#get-apiconverterconversionsextension","text":"Ottiene le possibili conversioni per un formato specifico. Parametri: extension : Estensione del file di partenza Risposta: [\"pdf\", \"docx\", \"txt\"]","title":"GET /api/converter/conversions/{extension}"},{"location":"WebService/#post-apiconverterconvert","text":"Effettua la conversione di un file. Parametri: file : File da convertire (MultipartFile) targetFormat : Formato di destinazione configFile : File di configurazione per la conversione Risposta: File convertito come array di byte con headers appropriati Processo di conversione: Creazione directory temporanea univoca Upload del file di configurazione Salvataggio del file di input nella directory temporanea Chiamata al motore di conversione Preparazione della risposta HTTP con file convertito Pulizia dei file temporanei","title":"POST /api/converter/convert"},{"location":"WebService/#3-enginewebservicejava","text":"Motore di conversione che gestisce la logica di trasformazione dei file. Supporta conversioni singole e multiple (tramite archivi ZIP). Funzionalit\u00e0 principali:","title":"3. EngineWebService.java"},{"location":"WebService/#getpossibleconversionsstring-extension","text":"Restituisce i formati disponibili per la conversione da un formato specifico.","title":"getPossibleConversions(String extension)"},{"location":"WebService/#conversionestring-srcext-string-outext-file-srcfile","text":"Esegue la conversione del file: Verifica se \u00e8 richiesta una conversione multipla (file ZIP) Gestisce conversioni singole o multiple Utilizza il pattern Strategy per selezionare il convertitore appropriato","title":"conversione(String srcExt, String outExt, File srcFile)"},{"location":"WebService/#conversione-multipla","text":"Per file ZIP contiene pi\u00f9 file dello stesso formato: Estrazione dei file dall'archivo Conversione di ogni file individualmente Ricompressione dei file convertiti","title":"Conversione Multipla"},{"location":"WebService/#conversione-singola","text":"Per file individuali: Selezione del convertitore tramite reflection Istanziazione dinamica del convertitore Esecuzione della conversione Pulizia dei file temporanei","title":"Conversione Singola"},{"location":"WebService/#4-globalexceptionhandlerjava","text":"Gestore globale delle eccezioni che fornisce risposte strutturate per tutti gli errori del sistema. Eccezioni gestite: IllegalExtensionException (Codice: 1001) FileMoveException (Codice: 1002) UnsupportedConversionException (Codice: 1003) IOException (Codice: 1004) BatchConversionException (Codice: 1005) ConversionException (Codice: 1006) FileCreationException (Codice: 1007) EmptyFileException (Codice: 1008) FormatsException (Codice: 1009) PasswordException (Codice: 1010) NullPointerException (Codice: 1011) Exception generica (Codice: 9999) Formato risposta errore: { \"errorCode\": 1001, \"message\": \"Descrizione dell'errore\", \"stackTrace\": \"Prima riga dello stack trace\" }","title":"4. GlobalExceptionHandler.java"},{"location":"WebService/#5-errorresponsejava","text":"Classe DTO per la rappresentazione strutturata degli errori nelle risposte JSON. Campi: errorCode : Codice numerico identificativo dell'errore message : Messaggio descrittivo dell'errore stackTrace : Prima riga dello stack trace per il debugging","title":"5. ErrorResponse.java"},{"location":"WebService/#flusso-di-conversione","text":"","title":"Flusso di Conversione"},{"location":"WebService/#1-richiesta-formati-disponibili","text":"Client \u2192 GET /api/converter/conversions/{extension} \u2192 Server Server \u2192 Consulta configurazione \u2192 Restituisce lista formati","title":"1. Richiesta Formati Disponibili"},{"location":"WebService/#2-conversione-file","text":"Client \u2192 POST /api/converter/convert \u2192 Server Server \u2192 Crea directory temporanea Server \u2192 Salva file di input e configurazione Server \u2192 Chiama EngineWebService.conversione() EngineWebService \u2192 Seleziona convertitore dinamicamente EngineWebService \u2192 Esegue conversione Server \u2192 Prepara risposta HTTP con file convertito Server \u2192 Pulisce file temporanei Server \u2192 Restituisce file al client","title":"2. Conversione File"},{"location":"WebService/#gestione-file-temporanei","text":"Il sistema utilizza directory temporanee univoche per ogni conversione: Creazione : Files.createTempDirectory(\"conversion-\" + UUID.randomUUID() + \"-\") Utilizzo : Salvataggio file di input e configurazione Pulizia : Eliminazione automatica di file e directory al termine della conversione Questa strategia garantisce: Isolamento delle conversioni concorrenti Prevenzione di conflitti di nomi file Pulizia automatica in caso di errori","title":"Gestione File Temporanei"},{"location":"WebService/#gestione-degli-errori","text":"Il sistema implementa una gestione strutturata degli errori su pi\u00f9 livelli:","title":"Gestione degli Errori"},{"location":"WebService/#1-validazione-input","text":"Controllo esistenza e validit\u00e0 dei file Verifica supporto formati Validazione parametri richiesti","title":"1. Validazione Input"},{"location":"WebService/#2-gestione-eccezioni-di-conversione","text":"Eccezioni specifiche per ogni tipo di errore Logging dettagliato per debugging Rollback automatico in caso di fallimento","title":"2. Gestione Eccezioni di Conversione"},{"location":"WebService/#3-risposte-http-strutturate","text":"Codici di errore standardizzati Messaggi descrittivi per l'utente Stack trace per il debugging (solo primo livello)","title":"3. Risposte HTTP Strutturate"},{"location":"WebService/#sicurezza-e-performance","text":"","title":"Sicurezza e Performance"},{"location":"WebService/#gestione-concorrenza","text":"Directory temporanee univoche per conversioni parallele Pulizia automatica dei file temporanei Gestione safe dell'eliminazione file","title":"Gestione Concorrenza"},{"location":"WebService/#validazione-file","text":"Controllo tipo MIME tramite libreria Apache Tika Validazione estensioni supportate Controllo esistenza e integrit\u00e0 file","title":"Validazione File"},{"location":"WebService/#logging","text":"Logging strutturato con Log4j2 Tracciamento completo delle operazioni Livelli di log configurabili (TRACE, INFO, WARN, ERROR)","title":"Logging"},{"location":"WebService/#configurazione","text":"Il sistema utilizza due tipi di configurazione:","title":"Configurazione"},{"location":"WebService/#1-configurazione-server-serverconfigjson","text":"Definisce i convertitori disponibili e le mappature formato \u2192 classe: { \"conversions\": { \"pdf\": { \"docx\": \"webService.server.converters.PdfToDocxConverter\", \"txt\": \"webService.server.converters.PdfToTxtConverter\" } } }","title":"1. Configurazione Server (serverConfig.json)"},{"location":"WebService/#2-configurazione-conversione-conversioncontext","text":"Parametri specifici per ogni conversione (caricata dinamicamente dal client): Abilitazione conversioni multiple Parametri specifici del convertitore Opzioni di formattazione","title":"2. Configurazione Conversione (conversionContext)"},{"location":"WebService/#estendibilita","text":"","title":"Estendibilit\u00e0"},{"location":"WebService/#aggiunta-nuovi-convertitori","text":"Estendere la classe astratta Converter Opzionale: estendere la classe astratta ConverterDocumentsWithPassword Aggiungere la mappatura in serverConfig.json Il sistema caricher\u00e0 dinamicamente la classe tramite reflection","title":"Aggiunta Nuovi Convertitori"},{"location":"WebService/#aggiunta-nuovi-formati","text":"Implementare il convertitore specifico Aggiornare la configurazione dei formati supportati Opzionale: aggiungere validazioni specifiche nel GlobalExceptionHandler Questa architettura modulare permette l'estensione del sistema senza modifiche al codice esistente, seguendo il principio Open/Closed del SOLID design.","title":"Aggiunta Nuovi Formati"},{"location":"manuale_utente/","text":"Manuale Utente - File Converter Manager Primo Avvio Requisiti di Sistema Java 8 o superiore. Permessi di lettura/scrittura sulle cartelle che userai. Come Funziona l'Applicazione File Converter Manager \u00e8 un'applicazione che converte automaticamente i file da un formato all'altro. Funziona monitorando una cartella: quando inserisci un file, l'app lo rileva e ti chiede in che formato convertirlo. Il Processo di Conversione Inserisci il file nella cartella monitorata. Scegli il formato di destinazione dal popup. Attendi che il server converta il file. Trova il file convertito nella cartella \"File Convertiti\". Interfaccia Principale Indicatori di Stato Bottone Verde (in basso a destra): Monitoraggio attivo. Bottone Rosso (in alto a basso): Monitoraggio disattivato. Log dell'Applicazione : Mostra in tempo reale cosa sta facendo l'app. Statistiche L'applicazione tiene traccia di: File Rilevati : Quanti file hai inserito. Conversioni Riuscite : Quanti file sono stati convertiti con successo. Conversioni Fallite : Quanti file hanno avuto problemi. Gestione delle Cartelle L'applicazione usa tre cartelle principali: Cartella Monitorata (Input) Qui inserisci i file da convertire. L'app monitora costantemente questa cartella. Accesso rapido : Pulsante \"Carica File\". Cartella File Convertiti (Success) I file convertiti con successo finiscono qui. Accesso rapido : Pulsante \"File Convertiti\". Cartella Conversioni Fallite (Error) I file che non si riescono a convertire finiscono qui. Accesso rapido : Pulsante \"Conversioni Fallite\". Configurazione Configurazione Base (Pulsante \"Config\") Cartelle Personalizzate Puoi cambiare il percorso di tutte e tre le cartelle. Usa i pulsanti \"Sfoglia...\" per selezionare cartelle diverse. Monitoraggio Automatico Attiva/disattiva l'avvio automatico del monitoraggio. Se attivo, al prossimo avvio l'app inizier\u00e0 subito a monitorare. Configurazione Conversioni (Pulsante \"Conversion Config\") Password per File Protetti Se devi convertire PDF o documenti protetti da password inserisci la password qui prima di iniziare la conversione. Privacy : La password \u00e8 usata solo per la conversione, mai salvata o condivisa. Unione Pagine PDF Quando converti PDF in immagini. OFF : Ogni pagina diventa un'immagine separata. ON : Tutte le pagine diventano un'unica immagine lunga. Output Zippato OFF : Ricevi il file convertito direttamente. ON : Il file convertito viene messo in un archivio zip. Utile per ridurre le dimensioni o organizzare meglio i file. Conversione multpla Quando devi convertire una cartella compressa. OFF : Viene convertito il singolo file zip. ON : Vengono convertiti tutti i file contenuti nella cartella compressa. Come Convertire i File Attiva il monitoraggio (pulsante \"Avvia Monitoraggio\" se il punto \u00e8 rosso). Clicca \"Carica File\" per aprire la cartella monitorata. Copia/sposta il tuo file nella cartella. Scegli il formato dal popup che appare. Attendi - vedrai il progresso nel log. Trova il file convertito nella cartella \"Success\". Formati Supportati L'app rileva automaticamente il formato del file originale. Mostra solo i formati di destinazione disponibili. Gestione Errori e Problemi Indicatori di Problemi Popup di errore : Spiega brevemente cosa \u00e8 andato storto. File nella cartella Error : Conversioni fallite. Cause Comuni di Errore File corrotto o non leggibile. Formato non supportato per la conversione richiesta. File troppo grande. File protetto senza password corretta. Problemi di connessione al server. File Originali I tuoi file originali non vengono mai cancellati . Puoi trovarli nella cartella monitorata o in quella dedicata alle conversioni fallite. Consigli per un Uso Ottimale Organizzazione Crea una cartella dedicata solo per le conversioni. Mantieni le tre cartelle (input, success, error) nella stessa directory principale. Svuota periodicamente le cartelle per evitare accumuli. Flusso di utilizzo Consigliato Configura le opzioni di conversione se necessario. Attiva il monitoraggio. Copia i file nella cartella monitorata. Configura le opzioni di conversione se necessario. Controlla il log per seguire il progresso. Organizza i file convertiti dalla cartella success.","title":"Manuale Utente"},{"location":"manuale_utente/#manuale-utente-file-converter-manager","text":"","title":"Manuale Utente - File Converter Manager"},{"location":"manuale_utente/#primo-avvio","text":"","title":"Primo Avvio"},{"location":"manuale_utente/#requisiti-di-sistema","text":"Java 8 o superiore. Permessi di lettura/scrittura sulle cartelle che userai.","title":"Requisiti di Sistema"},{"location":"manuale_utente/#come-funziona-lapplicazione","text":"File Converter Manager \u00e8 un'applicazione che converte automaticamente i file da un formato all'altro. Funziona monitorando una cartella: quando inserisci un file, l'app lo rileva e ti chiede in che formato convertirlo.","title":"Come Funziona l'Applicazione"},{"location":"manuale_utente/#il-processo-di-conversione","text":"Inserisci il file nella cartella monitorata. Scegli il formato di destinazione dal popup. Attendi che il server converta il file. Trova il file convertito nella cartella \"File Convertiti\".","title":"Il Processo di Conversione"},{"location":"manuale_utente/#interfaccia-principale","text":"","title":"Interfaccia Principale"},{"location":"manuale_utente/#indicatori-di-stato","text":"Bottone Verde (in basso a destra): Monitoraggio attivo. Bottone Rosso (in alto a basso): Monitoraggio disattivato. Log dell'Applicazione : Mostra in tempo reale cosa sta facendo l'app.","title":"Indicatori di Stato"},{"location":"manuale_utente/#statistiche","text":"L'applicazione tiene traccia di: File Rilevati : Quanti file hai inserito. Conversioni Riuscite : Quanti file sono stati convertiti con successo. Conversioni Fallite : Quanti file hanno avuto problemi.","title":"Statistiche"},{"location":"manuale_utente/#gestione-delle-cartelle","text":"L'applicazione usa tre cartelle principali:","title":"Gestione delle Cartelle"},{"location":"manuale_utente/#cartella-monitorata-input","text":"Qui inserisci i file da convertire. L'app monitora costantemente questa cartella. Accesso rapido : Pulsante \"Carica File\".","title":"Cartella Monitorata (Input)"},{"location":"manuale_utente/#cartella-file-convertiti-success","text":"I file convertiti con successo finiscono qui. Accesso rapido : Pulsante \"File Convertiti\".","title":"Cartella File Convertiti (Success)"},{"location":"manuale_utente/#cartella-conversioni-fallite-error","text":"I file che non si riescono a convertire finiscono qui. Accesso rapido : Pulsante \"Conversioni Fallite\".","title":"Cartella Conversioni Fallite (Error)"},{"location":"manuale_utente/#configurazione","text":"","title":"Configurazione"},{"location":"manuale_utente/#configurazione-base-pulsante-config","text":"Cartelle Personalizzate Puoi cambiare il percorso di tutte e tre le cartelle. Usa i pulsanti \"Sfoglia...\" per selezionare cartelle diverse. Monitoraggio Automatico Attiva/disattiva l'avvio automatico del monitoraggio. Se attivo, al prossimo avvio l'app inizier\u00e0 subito a monitorare.","title":"Configurazione Base (Pulsante \"Config\")"},{"location":"manuale_utente/#configurazione-conversioni-pulsante-conversion-config","text":"Password per File Protetti Se devi convertire PDF o documenti protetti da password inserisci la password qui prima di iniziare la conversione. Privacy : La password \u00e8 usata solo per la conversione, mai salvata o condivisa. Unione Pagine PDF Quando converti PDF in immagini. OFF : Ogni pagina diventa un'immagine separata. ON : Tutte le pagine diventano un'unica immagine lunga. Output Zippato OFF : Ricevi il file convertito direttamente. ON : Il file convertito viene messo in un archivio zip. Utile per ridurre le dimensioni o organizzare meglio i file. Conversione multpla Quando devi convertire una cartella compressa. OFF : Viene convertito il singolo file zip. ON : Vengono convertiti tutti i file contenuti nella cartella compressa.","title":"Configurazione Conversioni (Pulsante \"Conversion Config\")"},{"location":"manuale_utente/#come-convertire-i-file","text":"Attiva il monitoraggio (pulsante \"Avvia Monitoraggio\" se il punto \u00e8 rosso). Clicca \"Carica File\" per aprire la cartella monitorata. Copia/sposta il tuo file nella cartella. Scegli il formato dal popup che appare. Attendi - vedrai il progresso nel log. Trova il file convertito nella cartella \"Success\".","title":"Come Convertire i File"},{"location":"manuale_utente/#formati-supportati","text":"L'app rileva automaticamente il formato del file originale. Mostra solo i formati di destinazione disponibili.","title":"Formati Supportati"},{"location":"manuale_utente/#gestione-errori-e-problemi","text":"","title":"Gestione Errori e Problemi"},{"location":"manuale_utente/#indicatori-di-problemi","text":"Popup di errore : Spiega brevemente cosa \u00e8 andato storto. File nella cartella Error : Conversioni fallite.","title":"Indicatori di Problemi"},{"location":"manuale_utente/#cause-comuni-di-errore","text":"File corrotto o non leggibile. Formato non supportato per la conversione richiesta. File troppo grande. File protetto senza password corretta. Problemi di connessione al server.","title":"Cause Comuni di Errore"},{"location":"manuale_utente/#file-originali","text":"I tuoi file originali non vengono mai cancellati . Puoi trovarli nella cartella monitorata o in quella dedicata alle conversioni fallite.","title":"File Originali"},{"location":"manuale_utente/#consigli-per-un-uso-ottimale","text":"","title":"Consigli per un Uso Ottimale"},{"location":"manuale_utente/#organizzazione","text":"Crea una cartella dedicata solo per le conversioni. Mantieni le tre cartelle (input, success, error) nella stessa directory principale. Svuota periodicamente le cartelle per evitare accumuli.","title":"Organizzazione"},{"location":"manuale_utente/#flusso-di-utilizzo-consigliato","text":"Configura le opzioni di conversione se necessario. Attiva il monitoraggio. Copia i file nella cartella monitorata. Configura le opzioni di conversione se necessario. Controlla il log per seguire il progresso. Organizza i file convertiti dalla cartella success.","title":"Flusso di utilizzo Consigliato"}]}